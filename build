#!/bin/bash

# Debug mode
#set -x
#set -o pipefail

# Var
script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
export HOSTNAME=$HOSTNAME
MASTER_NODE=$(cat "${HOME}"/bin/mactohost | grep 'zip' | awk '{print $2}' | grep 'm')
COUNT_MASTER_NODE=$(echo ${MASTER_NODE} | awk '{print NF}')
M1=$(echo "${MASTER_NODE}" | grep m1)
WORK_NODE=$(cat "${HOME}"/bin/mactohost | grep 'zip' | awk '{print $2}' | grep 'w')
COUNT_WORK_NODE=$(echo ${WORK_NODE} | awk '{print NF}')
VIP=$(cat "$script_dir"/init-config.yaml | grep "^controlP" | cut -d " " -f 2 | cut -d ":" -f 1)
CNI="flannel"

# check vars
check_vars() {
  var_names=("script_dir" "HOSTNAME" "MASTER_NODE" "WORK_NODE" "COUNT_MASTER_NODE" "COUNT_WORK_NODE" "GWIF" "M1" "CNI")
  for var_name in "${var_names[@]}"; do
      [ -z "${!var_name}" ] && echo "$var_name is unset." && exit 1
  done
  return 0
}
check_vars

# Assign a heredoc value to a variable with read useless use of cat
IFS='' read -r -d '' INSTALL_kubeadm_kubelet_kubectl <<'EOT'
if ! (sudo apk update &> /dev/null; sudo apk add kubeadm kubelet kubectl --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted &> /dev/null); then
  echo "$a install kubectl , kubeadm , kubelet failed" && exit 1
fi

if ! sudo rc-update add kubelet default &> /dev/null; then
  echo "$a setup kubelet failed !" && exit 1
fi
EOT

IFS='' read -r -d '' SET_BIGRED_AS_K8S_ADMIN <<'EOT'
mkdir -p $HOME/.kube; sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config; sudo chown $(id -u):$(id -g) $HOME/.kube/config
EOT

IFS='' read -r -d '' INSTALL_kubeadm_kubelet <<'EOT'
if ! sudo apk add kubeadm kubelet --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted &> /dev/null; then
  echo "$w install kubeadm , kubelet failed" && exit 1
fi

if ! sudo rc-update add kubelet default &> /dev/null; then
  echo "$w setup kubelet failed !" && exit 1
fi
EOT

IFS='' read -r -d '' SETUP_KUBE_VIP <<'EOT'
export KVVERSION=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
alias kube-vip="sudo podman run --network host --rm ghcr.io/kube-vip/kube-vip:$KVVERSION"
sudo mkdir -p /etc/kubernetes/manifests/
${BASH_ALIASES[kube-vip]} manifest pod --interface $GWIF --vip $VIP --controlplane --arp --leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml
EOT

# function

## 1. Install kubectl , kubeadm , kubelet
INSTALL_K8S_PACKAGE() {
  if ! ssh "$a" "${INSTALL_kubeadm_kubelet_kubectl}" 2> /dev/null; then
    exit 1
  elif [ "$COUNT_MASTER_NODE" -eq "1" ]; then
    echo "Preparing control-plane nodes ok"
  fi
}

## 2. Set up kube-vip
SET_VIP() {
  ssh "$a" "export VIP=$VIP; export GWIF=$(ip r s | grep "^de" | cut -d ' ' -f 5); $SETUP_KUBE_VIP" &>/dev/null
}

## 3. Init Kubernetes
INIT_K8S() {
  cat "${script_dir}"/init-config.yaml | envsubst > "${script_dir}"/init-tmp-config.yaml && mv "${script_dir}"/init-tmp-config.yaml "${script_dir}"/init-config.yaml
  sudo kubeadm init --upload-certs --config="${script_dir}"/init-config.yaml &> /dev/null
  if [ "$?" == "0" ]; then
    echo "Starting control-plane ok"
  else
    echo "Your Kubernetes control-plane has initialized failed!" && exit 1
  fi
}

## 4. 將 Linux bigred user 設成 K8S 管理者
SET_K8S_ADMIN() {
  if ! (mkdir -p "$HOME"/.kube; sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config; sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config); then
    echo "$(hostname) Set bigred as admin failed!" && exit 1
  fi
}

## 5. 設定 K8S Master 可以執行 Pod
UNTAINT() {
  if ! cat "${script_dir}"/init-config.yaml | grep 'taints: \[\]' &> /dev/null; then
    kubectl taint node "$a" node-role.kubernetes.io/control-plane:NoSchedule- &> /dev/null
    if [ "$?" != "0" ]; then
      echo "node/"$a" untainted failed" && exit 1
    fi
  fi
}

## 6. Install CNI
INSTALL_CNI() {
  if [ "$CNI" == "calico" ]; then
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml &> /dev/null
    [ "$?" != "0" ] && echo "Setup CNI Error" && exit 1
    kubectl create -f "${script_dir}"/cni/calico-custom-resources.yaml &> /dev/null
    [ "$?" != "0" ] && echo "Setup CNI Error" && exit 1
  fi
  if [ "$CNI" == "flannel" ]; then
    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml &> /dev/null
    [ "$?" != "0" ] && echo "Setup CNI Error" && exit 1
  fi
}

## 7. Joining more nodes
JOIN_NODE_MASTER_VAR() {
  certs=$(sudo kubeadm init phase upload-certs --upload-certs | tail -n 1)
  JOIN_MASTER_NODE=$(echo "sudo $(sudo kubeadm token create --print-join-command) --control-plane --certificate-key ${certs}")
}

JOIN_NODE_WORKER_VAR() {
  JOIN_WORKER_NODE=$(echo "sudo $(sudo kubeadm token create --print-join-command 2>/dev/null)")
}

JOIN_MASTER() {
  ssh "$a" "$JOIN_MASTER_NODE" &> /dev/null
  if [ "$?" != "0" ]; then
    echo "$a node join failed" && exit 1
  fi
}

SET_REMOTE_BIGRED_AS_K8S_ADMIN() {
  ssh "$a" "$SET_BIGRED_AS_K8S_ADMIN"
  if [ "$?" != "0" ]; then
    echo "${a} Set bigred as admin failed!" && exit 1
  fi
}


for a in $MASTER_NODE
do
  INSTALL_K8S_PACKAGE
  if [ "$a" == "$M1" ]; then
    if [ "$COUNT_MASTER_NODE" -ne "1" ]; then
      SET_VIP && echo "Preparing control-plane nodes ok"
    else
      grep "^controlPlaneEndpoint" "${script_dir}"/init-config.yaml && sed -i '/controlPlaneEndpoint/d' "${script_dir}"/init-config.yaml
    fi
    INIT_K8S
    SET_K8S_ADMIN
    UNTAINT
    INSTALL_CNI
  else
    JOIN_NODE_MASTER_VAR
    JOIN_MASTER
    SET_REMOTE_BIGRED_AS_K8S_ADMIN
    UNTAINT
    SET_VIP
    [ "$?" == "0" ] && echo "Joining "$a" control-plane node ok" || (echo "Joining "$a" control-plane node Error" && exit 1)
  fi
done

for w in $WORK_NODE
do
  ssh "$w" "$INSTALL_kubeadm_kubelet" 2> /dev/null

  JOIN_NODE_WORKER_VAR
  if ! ssh "$w" "$JOIN_WORKER_NODE" &> /dev/null; then
    echo "$w join failed" && exit 1
  fi

  kubectl label node "$w" node-role.kubernetes.io/worker= &> /dev/null
  [ "$?" == "0" ] && echo "Joining "$w" worker node ok" || (echo "Joining "$w" worker node failed" && exit 1)
done

echo -e "\nCluster creation complete. You can now use the cluster with:\nkubectl get nodes"
